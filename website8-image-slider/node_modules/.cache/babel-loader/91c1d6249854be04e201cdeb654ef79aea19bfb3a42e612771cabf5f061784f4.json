{"ast":null,"code":"var _jsxFileName = \"/Users/Ambili/Desktop/FullProjectReact/for-small-learning-trials/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from \"react\";\nimport classes from \"./App.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const num = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    console.log(\"ctx\", ctx);\n    const gridElement = document.querySelector(`.${classes.myGrid}`);\n    const gridRect = gridElement.getBoundingClientRect();\n\n    // Calculate corners of the grid based on its position on the page\n    const topLeft = {\n      x: gridRect.left,\n      y: gridRect.top\n    };\n    const bottomRight = {\n      x: gridRect.right,\n      y: gridRect.bottom\n    };\n    console.log(\"topleft\", \"bottomright\", topLeft, bottomRight);\n    // Draw diagonal line\n    ctx.beginPath();\n    ctx.moveTo(topLeft.x, topLeft.y);\n    ctx.lineTo(bottomRight.x, bottomRight.y);\n    ctx.strokeStyle = \"red\"; // Set the line color\n    ctx.stroke();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.myGridContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.myGrid,\n      children: num.map((num, index) => /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: classes.myGridItem,\n        children: num\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useRef","useEffect","classes","jsxDEV","_jsxDEV","App","_s","num","canvasRef","canvas","current","ctx","getContext","console","log","gridElement","document","querySelector","myGrid","gridRect","getBoundingClientRect","topLeft","x","left","y","top","bottomRight","right","bottom","beginPath","moveTo","lineTo","strokeStyle","stroke","className","myGridContainer","children","map","index","myGridItem","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/Users/Ambili/Desktop/FullProjectReact/for-small-learning-trials/src/App.js"],"sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport classes from \"./App.module.css\";\n\nfunction App() {\n  const num = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n\n    console.log(\"ctx\", ctx);\n\n    const gridElement = document.querySelector(`.${classes.myGrid}`);\n    const gridRect = gridElement.getBoundingClientRect();\n\n    // Calculate corners of the grid based on its position on the page\n    const topLeft = { x: gridRect.left, y: gridRect.top };\n    const bottomRight = { x: gridRect.right, y: gridRect.bottom };\n    console.log(\"topleft\", \"bottomright\", topLeft, bottomRight);\n    // Draw diagonal line\n    ctx.beginPath();\n    ctx.moveTo(topLeft.x, topLeft.y);\n    ctx.lineTo(bottomRight.x, bottomRight.y);\n    ctx.strokeStyle = \"red\"; // Set the line color\n    ctx.stroke();\n  }, []);\n\n  return (\n    <div className={classes.myGridContainer}>\n      <div className={classes.myGrid}>\n        {num.map((num, index) => (\n          <h1 key={index} className={classes.myGridItem}>\n            {num}\n          </h1>\n        ))}\n      </div>\n      <canvas ref={canvasRef}></canvas>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAChD,OAAOC,OAAO,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAMC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACvC,MAAMC,SAAS,GAAGR,MAAM,CAAC,IAAI,CAAC;EAE9BC,SAAS,CAAC,MAAM;IACd,MAAMQ,MAAM,GAAGD,SAAS,CAACE,OAAO;IAChC,MAAMC,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IAEnCC,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEH,GAAG,CAAC;IAEvB,MAAMI,WAAW,GAAGC,QAAQ,CAACC,aAAa,CAAE,IAAGf,OAAO,CAACgB,MAAO,EAAC,CAAC;IAChE,MAAMC,QAAQ,GAAGJ,WAAW,CAACK,qBAAqB,CAAC,CAAC;;IAEpD;IACA,MAAMC,OAAO,GAAG;MAAEC,CAAC,EAAEH,QAAQ,CAACI,IAAI;MAAEC,CAAC,EAAEL,QAAQ,CAACM;IAAI,CAAC;IACrD,MAAMC,WAAW,GAAG;MAAEJ,CAAC,EAAEH,QAAQ,CAACQ,KAAK;MAAEH,CAAC,EAAEL,QAAQ,CAACS;IAAO,CAAC;IAC7Df,OAAO,CAACC,GAAG,CAAC,SAAS,EAAE,aAAa,EAAEO,OAAO,EAAEK,WAAW,CAAC;IAC3D;IACAf,GAAG,CAACkB,SAAS,CAAC,CAAC;IACflB,GAAG,CAACmB,MAAM,CAACT,OAAO,CAACC,CAAC,EAAED,OAAO,CAACG,CAAC,CAAC;IAChCb,GAAG,CAACoB,MAAM,CAACL,WAAW,CAACJ,CAAC,EAAEI,WAAW,CAACF,CAAC,CAAC;IACxCb,GAAG,CAACqB,WAAW,GAAG,KAAK,CAAC,CAAC;IACzBrB,GAAG,CAACsB,MAAM,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE7B,OAAA;IAAK8B,SAAS,EAAEhC,OAAO,CAACiC,eAAgB;IAAAC,QAAA,gBACtChC,OAAA;MAAK8B,SAAS,EAAEhC,OAAO,CAACgB,MAAO;MAAAkB,QAAA,EAC5B7B,GAAG,CAAC8B,GAAG,CAAC,CAAC9B,GAAG,EAAE+B,KAAK,kBAClBlC,OAAA;QAAgB8B,SAAS,EAAEhC,OAAO,CAACqC,UAAW;QAAAH,QAAA,EAC3C7B;MAAG,GADG+B,KAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACNvC,OAAA;MAAQwC,GAAG,EAAEpC;IAAU;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9B,CAAC;AAEV;AAACrC,EAAA,CArCQD,GAAG;AAAAwC,EAAA,GAAHxC,GAAG;AAuCZ,eAAeA,GAAG;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}